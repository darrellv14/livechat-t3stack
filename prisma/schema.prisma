// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    messages      Message[]
    chatRooms     ChatRoom[]   @relation("ChatRoomToUser")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ChatRoom {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    name      String?
    isGroup   Boolean   @default(false) // false for 1-on-1, true for group
    messages  Message[]
    users     User[]    @relation("ChatRoomToUser")

    @@index([isGroup])
}

model Message {
    id         String    @id @default(cuid())
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @default(now()) @updatedAt
    text       String
    isEdited   Boolean   @default(false)
    isDeleted  Boolean   @default(false)
    chatRoom   ChatRoom  @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
    chatRoomId String
    user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String

    @@index([chatRoomId, createdAt])
    @@index([userId])
}
